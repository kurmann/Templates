<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <PackageType>Template</PackageType>
    <TargetFramework>netstandard2.0</TargetFramework>
    <PackageId>Kurmann.Templates</PackageId>
    <Title>Templates</Title>
    <Authors>Patrick Kurmann</Authors>

    <!-- Package-Tages zur Katalogisierung auf Nuget.org. Mehrere Tags mit Semikolen ";" trennen. -->
    <PackageTags>dotnet-new;templates;</PackageTags>

    <!-- Die URL des GIT-Repositories -->
    <RepositoryUrl>https://github.com/kurmann/Templates</RepositoryUrl>
    <RepositoryType>git</RepositoryType>

    <!-- Die Kurzbeschreibung des NuGet-Packets. Die längere Beschreibung wird als README.md eingebunden -->
    <Description>Vorlagen für .NET-Entwicklung im Kurmann-Namespace.</Description>

    <!-- Versionsverwaltung und -strategie: 
     Die <PackageVersion> hier definiert die Basisversion für NuGet-Paketveröffentlichungen.
     Für reguläre, stabile Releases (auf dem 'main'-Branch) sollte diese Version manuell gemäß den SemVer-Richtlinien (MAJOR.MINOR.PATCH) aktualisiert werden, 
     bevor Änderungen in den 'main'-Branch gemerged werden. Dies stellt sicher, dass die Veröffentlichung die richtige Versionsnummer erhält.

     Zwischenreleases, die automatisch über GitHub Actions für Nicht-'main'-Branches generiert werden, fügen der hier definierten Basisversion 
     ein datumsbasiertes Suffix hinzu (z.B. -preview.YYYYMMDDHHMM), um die Einzigartigkeit und den Pre-Release-Status dieser Builds zu kennzeichnen.
     Es ist nicht notwendig und wird nicht empfohlen, Pre-Release-Identifier wie 'alpha', 'beta', oder 'rc' manuell hier einzufügen,
     da dies über den CI/CD-Prozess automatisiert gehandhabt wird. Alle Änderungen, die spezifisch Pre-Release-Versionen betreffen,
     sollten stattdessen durch den CI/CD-Prozess gesteuert werden.

     Die Release Notes für jede Version sollten separat gepflegt und vor dem Merge in den 'main'-Branch aktualisiert werden. -->
    <PackageVersion>0.3.1</PackageVersion>

    <!-- Die Release Notes sollten mindestens vor jeder Minor-Version in der README.md-Datei aktualisiert werden. -->
    <PackageReleaseNotes>Siehe README.md für Details.</PackageReleaseNotes>

    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageIcon>PackageIcon.png</PackageIcon>

    <IncludeContentInPackage>true</IncludeContentInPackage>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <ContentTargetFolders>content</ContentTargetFolders>

    <!-- Die Gitignore-Datei ist hier enthalten, da es sich um eine Lösungsvorlage für ein Modul handelt, das auf einem dedizierten Git-Repository basiert. -->
    <NoDefaultExcludes>true</NoDefaultExcludes>

    <!-- Templates enthalten in der Regel keine lib oder ref Ordner, da sie keine ausführbaren Codes oder Bibliotheken 
    liefern, sondern eher eine Sammlung von Dateien und Ordnern, die als Ausgangspunkt für neue Projekte dienen. 
    Deshalb kann die Warnung NU5128 ignoriert werden, solange das Template korrekt konfiguriert ist und wie erwartet 
    funktioniert. -->
    <NoPackageAnalysis>true</NoPackageAnalysis>

  </PropertyGroup>

  <ItemGroup>
    <Content Include="templates\**\*" Exclude="templates\**\bin\**\*;templates\**\obj\**\*;templates\**\TestResult\**\*" />
    
    <Compile Remove="**\*" />
    
    <!-- remove MacOS specific files -->
    <Content Remove="**\*.DS_Store" />

    <None Include="README.md" Pack="true" PackagePath="\"/>
    <None Include="LICENSE" Pack="true" PackagePath="\"/>
    <None Include="PackageIcon.png" Pack="true" PackagePath="\"/>

  </ItemGroup>

</Project>
